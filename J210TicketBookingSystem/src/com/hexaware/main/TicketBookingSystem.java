package com.hexaware.main;

import java.sql.SQLException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;

import com.hexaware.controller.BookingSystemServiceProviderImpl;
import com.hexaware.controller.EventServiceProviderImpl;
import com.hexaware.controller.IBookingSystemServiceProvider;
import com.hexaware.controller.IEventServiceProvider;
import com.hexaware.entity.Event;
import com.hexaware.entity.Revenue;
import com.hexaware.entity.Tickets;
import com.hexaware.exception.InvalidBookingIDException;


public class TicketBookingSystem {
	public static void main(String ar[]) {
		Scanner si = new Scanner(System.in);
		IEventServiceProvider esp = new EventServiceProviderImpl();
		IBookingSystemServiceProvider bsp = new BookingSystemServiceProviderImpl();
		String choice = null ,c;

		do {
		System.out.println("------ Menu ------"
				+ "\n1. Create Event"
				+ "\n2. Display Event details"
				+ "\n3. Available tickets for events"
				+ "\n4. Book tickets"
				+ "\n5. Cancel tickets"
				+ "\n6. Display booking"
				+ "\n7. Calculate revenue generated by each event"
				+ "\nType Exit to terminate"
				+ "\nEnter your choice:");
			choice = si.next();
		
			switch(choice) {
			case "1":
				try {
					esp.createEvent();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
				break;
			case "2":
				try{
					List<Event> eventList = esp.getEventDetails();
					for(Event event : eventList) {
						System.out.println(event);
					}
				}
				catch(SQLException e) {
					e.printStackTrace();
				}
				break;
			case "3":
				try{
					List<Tickets> ticketsList = esp.getAvailableNoOfTickets();
					for(Tickets tickets : ticketsList) {
						System.out.println(tickets);
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				break;
			case "4":
				bsp.bookTickets();
				break;
				
			case "5":
				try {
					bsp.cancelBooking();
				} catch (SQLException | InvalidBookingIDException e) {
					e.printStackTrace();
				}
				break;
				
			case "6":
				bsp.getBookingDetails();
				break;
				
			case "7":
				List<Revenue> revenue;
				try {
					revenue = esp.getTotalRevenue();
					for(Revenue rev:revenue) {
						System.out.println(rev);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
				break;
			case "exit":
				System.out.println("Terminated");
				System.exit(0);
			case "Exit":
				System.out.println("Terminated");
				System.exit(0);
			default:
				System.out.println("Enter valid choice:");
			}
			System.out.println("Type y to continue:");
			
			
				c = si.next();
			
		}while(c.equals("Y")||c.equals("y")||!choice.equals("Exit")||!choice.equals("exit"));

		
		si.close();
	}
}
